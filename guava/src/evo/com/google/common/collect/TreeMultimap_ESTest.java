/*
* This file was automatically generated by EvoSuite
* Wed Feb 26 22:59:06 GMT 2020
*/

package com.google.common.collect;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.*;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class TreeMultimap_ESTest extends TreeMultimap_ESTest_scaffolding {

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a Collection criada por TreeMultimap é diferente de nula.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        TreeMultimap<Integer, LinkedList<String>> treeMultimap0 = new TreeMultimap<Integer, LinkedList<String>>((Comparator<? super Integer>) null, (Comparator<? super LinkedList<String>>) null);
        Integer integer0 = new Integer(0);
        Collection<LinkedList<String>> collection0 = treeMultimap0.createCollection(integer0);
        assertNotNull(collection0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a instância de TreeMultimap tem os valores iniciais esperados para o map.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        TreeMultimap<TreeMap<Integer, Object>, TreeMap<Integer, Object>> treeMultimap0 = new TreeMultimap<TreeMap<Integer, Object>, TreeMap<Integer, Object>>(comparator0, comparator0);
        Map<TreeMap<Integer, Object>, Collection<TreeMap<Integer, Object>>> map0 = treeMultimap0.createAsMap();
        assertEquals(0, map0.size());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método get() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        TreeMultimap<Integer, TreeSet<Integer>> treeMultimap0 = new TreeMultimap<Integer, TreeSet<Integer>>((Comparator<? super Integer>) null, (Comparator<? super TreeSet<Integer>>) null);
        // Undeclared exception!
        try {
            treeMultimap0.get((Integer) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.TreeMap", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método create() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test03() throws Throwable {
        // Undeclared exception!
        try {
            TreeMultimap.create((Comparator<? super LinkedList<Integer>>) null, (Comparator<? super LinkedList<Object>>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a instância de TreeMultimap tem os valores iniciais esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        TreeMultimap<Object, Integer> treeMultimap0 = new TreeMultimap<Object, Integer>(comparator0, comparator0);
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        TreeMultimap<Object, Object> treeMultimap1 = new TreeMultimap<Object, Object>(comparator1, comparator1);
        NavigableSet<Object> navigableSet0 = treeMultimap1.get(treeMultimap0);
        assertTrue(navigableSet0.isEmpty());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método createCollection() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test05() throws Throwable {
        TreeMultimap<Integer, Integer> treeMultimap0 = new TreeMultimap<Integer, Integer>((Comparator<? super Integer>) null, (Comparator<? super Integer>) null);
        // Undeclared exception!
        try {
            treeMultimap0.createCollection((Integer) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.collect.TreeMultimap", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a instância de TreeMultimap tem os valores iniciais esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(comparator0).toString();
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        TreeMultimap<String, LinkedList<String>> treeMultimap0 = TreeMultimap.create((Comparator<? super String>) comparator0, (Comparator<? super LinkedList<String>>) comparator1);
        Comparator<? super String> comparator2 = treeMultimap0.keyComparator();
        assertNotNull(comparator2);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a instância de TreeMultimap tem os valores iniciais esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        TreeMultimap<Object, Object> treeMultimap0 = new TreeMultimap<Object, Object>(comparator0, comparator0);
        NavigableMap<Object, Collection<Object>> navigableMap0 = treeMultimap0.asMap();
        assertTrue(navigableMap0.isEmpty());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *      duas instância de TreeMultimap são desiguais.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        TreeMultimap<String, String> treeMultimap0 = new TreeMultimap<String, String>(comparator0, comparator0);
        TreeMultimap<String, String> treeMultimap1 = TreeMultimap.create((Multimap<? extends String, ? extends String>) treeMultimap0);
        assertNotSame(treeMultimap1, treeMultimap0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *      uma variável de TreeMultimap é não nula.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test09() throws Throwable {
        TreeMultimap<Integer, String> treeMultimap0 = TreeMultimap.create();
        Comparator<? super String> comparator0 = treeMultimap0.valueComparator();
        assertNotNull(comparator0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a instância de TreeMultimap tem os valores iniciais esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test10() throws Throwable {
        TreeMultimap<Object, String> treeMultimap0 = new TreeMultimap<Object, String>((Comparator<? super Object>) null, (Comparator<? super String>) null);
        NavigableSet<Object> navigableSet0 = treeMultimap0.keySet();
        assertEquals(0, navigableSet0.size());
    }
}
