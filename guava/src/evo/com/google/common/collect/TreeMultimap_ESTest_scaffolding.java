/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Feb 26 22:59:06 GMT 2020
 */

package com.google.common.collect;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class TreeMultimap_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.google.common.collect.TreeMultimap"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/var/folders/9c/2fm2fk412pj9zjkzvdx9w2fr0000gn/T/"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/Users/joaocorreia/guava/guava"); 
    java.lang.System.setProperty("user.home", "/Users/joaocorreia"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "joaocorreia"); 
    java.lang.System.setProperty("user.timezone", "America/Sao_Paulo"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TreeMultimap_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.collect.AllEqualOrdering",
      "com.google.common.collect.Sets$CartesianSet",
      "com.google.common.collect.ListMultimap",
      "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
      "com.google.common.collect.PeekingIterator",
      "com.google.common.collect.Maps$NavigableKeySet",
      "com.google.common.collect.Multimaps$AsMap",
      "com.google.common.collect.ForwardingNavigableSet",
      "com.google.common.base.Optional",
      "com.google.common.collect.Iterators$ArrayItr",
      "com.google.common.collect.Sets$2",
      "com.google.common.collect.Maps$KeySet",
      "com.google.common.collect.Sets$3",
      "com.google.common.collect.Sets$1",
      "com.google.common.collect.NullsLastOrdering",
      "com.google.common.collect.Maps$Values",
      "com.google.common.collect.AbstractSortedSetMultimap",
      "com.google.common.collect.BaseImmutableMultimap",
      "com.google.common.collect.Maps$SortedKeySet",
      "com.google.common.collect.Range",
      "com.google.common.collect.ByFunctionOrdering",
      "com.google.common.collect.Iterators$10",
      "com.google.common.collect.ForwardingSortedSet",
      "com.google.common.collect.AbstractSortedKeySortedSetMultimap",
      "com.google.common.base.Predicate",
      "com.google.common.collect.Sets$PowerSet",
      "com.google.common.collect.LexicographicalOrdering",
      "com.google.common.collect.AbstractMapBasedMultimap$1",
      "com.google.common.collect.AbstractMapBasedMultimap$2",
      "com.google.common.collect.ImmutableListMultimap",
      "com.google.common.collect.FilteredMultimap",
      "com.google.common.collect.FilteredSetMultimap",
      "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet",
      "com.google.common.collect.Iterators$ConcatenatedIterator",
      "com.google.common.collect.NullsFirstOrdering",
      "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfInt",
      "com.google.common.collect.Sets$Accumulator",
      "com.google.common.collect.AbstractMultimap$Values",
      "com.google.common.collect.Sets$SetView",
      "com.google.common.collect.Multimaps",
      "com.google.common.collect.AbstractMapBasedMultimap",
      "com.google.common.collect.UsingToStringOrdering",
      "com.google.common.collect.UnmodifiableListIterator",
      "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble",
      "com.google.common.collect.ImmutableMultimap",
      "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
      "com.google.common.collect.Sets$4",
      "com.google.common.collect.RangeGwtSerializationDependencies",
      "com.google.common.collect.AbstractIterator",
      "com.google.common.collect.Multimaps$Keys",
      "com.google.common.collect.Sets$UnmodifiableNavigableSet",
      "com.google.common.collect.Sets$FilteredNavigableSet",
      "com.google.common.collect.Sets$FilteredSortedSet",
      "com.google.common.collect.Sets$ImprovedAbstractSet",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
      "com.google.common.collect.AbstractMapBasedMultimap$Itr",
      "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
      "com.google.common.collect.Iterators$EmptyModifiableIterator",
      "com.google.common.collect.Sets$SubSet",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.AbstractMultimap$EntrySet",
      "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
      "com.google.common.collect.Sets$FilteredSet",
      "com.google.common.collect.ImmutableEnumSet",
      "com.google.common.collect.AbstractMapBasedMultimap$KeySet$1",
      "com.google.common.collect.AbstractMultimap$Entries",
      "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
      "com.google.common.collect.TreeMultimap",
      "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfObject",
      "com.google.common.collect.CollectSpliterators$FlatMapSpliterator",
      "com.google.errorprone.annotations.DoNotMock",
      "com.google.common.collect.ImmutableSetMultimap",
      "com.google.common.collect.AbstractSetMultimap",
      "com.google.common.collect.Iterators$9",
      "com.google.common.base.Function",
      "com.google.common.collect.ImmutableSet",
      "com.google.common.collect.SortedSetMultimap",
      "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong",
      "com.google.common.collect.ComparatorOrdering",
      "com.google.common.collect.AbstractIndexedListIterator",
      "com.google.common.collect.Iterators$1",
      "com.google.common.collect.Multiset$Entry",
      "com.google.common.collect.Sets$DescendingSet",
      "com.google.common.collect.Iterators$4",
      "com.google.common.collect.Sets",
      "com.google.common.collect.Iterators$5",
      "com.google.common.collect.ForwardingMap",
      "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap",
      "com.google.common.collect.ForwardingSet",
      "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive",
      "com.google.common.collect.ExplicitOrdering",
      "com.google.common.collect.Maps$DescendingMap",
      "com.google.common.collect.Maps$ViewCachingAbstractMap",
      "com.google.common.collect.Maps$IteratorBasedAbstractMap",
      "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet",
      "com.google.common.collect.Maps$EntrySet",
      "com.google.common.collect.ForwardingObject",
      "com.google.common.collect.Multiset",
      "com.google.common.collect.Multimaps$Entries",
      "com.google.common.collect.AbstractMultimap",
      "com.google.common.base.Supplier",
      "com.google.common.collect.AbstractMultiset",
      "com.google.common.collect.Multimap",
      "com.google.common.collect.Collections2$FilteredCollection",
      "com.google.common.collect.CompoundOrdering",
      "com.google.common.collect.Iterators",
      "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
      "com.google.common.collect.ImmutableList",
      "com.google.common.collect.ReverseOrdering",
      "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
      "com.google.common.collect.Ordering$IncomparableValueException",
      "com.google.common.collect.ForwardingCollection",
      "com.google.common.collect.Iterators$PeekingImpl",
      "com.google.common.collect.ReverseNaturalOrdering",
      "com.google.common.collect.Maps",
      "com.google.common.collect.SetMultimap",
      "com.google.common.collect.CollectSpliterators",
      "com.google.common.collect.Maps$EntryTransformer",
      "com.google.common.collect.Ordering",
      "com.google.common.collect.NaturalOrdering",
      "com.google.common.collect.Iterators$MergingIterator",
      "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.Comparator", false, TreeMultimap_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TreeMultimap_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.google.common.collect.AbstractMultimap",
      "com.google.common.collect.AbstractMapBasedMultimap",
      "com.google.common.collect.AbstractSetMultimap",
      "com.google.common.collect.AbstractSortedSetMultimap",
      "com.google.common.collect.AbstractSortedKeySortedSetMultimap",
      "com.google.common.collect.TreeMultimap",
      "com.google.common.collect.Ordering",
      "com.google.common.collect.NaturalOrdering",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.Sets$ImprovedAbstractSet",
      "com.google.common.collect.Maps$KeySet",
      "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
      "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
      "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet",
      "com.google.common.collect.AbstractMapBasedMultimap$KeySet$1",
      "com.google.common.collect.Maps$ViewCachingAbstractMap",
      "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
      "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
      "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap",
      "com.google.common.collect.CollectSpliterators",
      "com.google.common.collect.CollectSpliterators$FlatMapSpliterator",
      "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfObject",
      "com.google.common.collect.Multimaps$Entries",
      "com.google.common.collect.AbstractMultimap$Entries",
      "com.google.common.collect.AbstractMultimap$EntrySet",
      "com.google.common.collect.AbstractMapBasedMultimap$Itr",
      "com.google.common.collect.AbstractMapBasedMultimap$2",
      "com.google.common.collect.Iterators",
      "com.google.common.collect.Iterators$EmptyModifiableIterator",
      "com.google.common.collect.AbstractMultimap$Values",
      "com.google.common.collect.AbstractMultiset",
      "com.google.common.collect.Multimaps$Keys",
      "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
      "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet",
      "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet",
      "com.google.common.collect.Sets",
      "com.google.common.collect.ForwardingObject",
      "com.google.common.collect.ForwardingCollection",
      "com.google.common.collect.ForwardingSet",
      "com.google.common.collect.ForwardingSortedSet",
      "com.google.common.collect.Sets$UnmodifiableNavigableSet",
      "com.google.common.collect.AbstractMapBasedMultimap$1",
      "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
      "com.google.common.collect.Multimaps"
    );
  }
}
